{"version":3,"sources":["App/components/MemeGenerator/MemeTextBox.js","App/components/MemeGenerator/TemplateButton.js","App/components/MemeGenerator/Canvas.js","App/components/MemeGenerator/MemeGenerator.js","App/components/MemeGenerator/MemeGeneratorWrapper.js","App/components/MemeGallery/LikesController.js","App/components/MemeGallery/MemeModel.js","App/components/MemeGallery/MemeGallery.js","App/components/NavBar.js","App/App.js","serviceWorker.js","index.js"],"names":["MemeTextBox","_this","this","react_default","a","createElement","props","index","onChange","e","handleMemeText","target","value","React","Component","TemplateButton","className","src","meme","url","alt","onClick","reselectMeme","onMouseLeave","resetText","onMouseOver","changeText","Canvas","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvasRef","createRef","canvas","current","ctx","getContext","imgObj","img","Image","onload","drawImage","width","height","ref","require","MemeGenerator","handleInput","text","setState","searchTerm","checkMatch","regexp","RegExp","state","name","match","uploadMeme","event","preventDefault","myImg","template_id","currentMeme","id","photoURL","memeTexts","memeText","user","console","log","Axios","post","then","response","status","window","location","href","catch","err","createTextBoxes","textBoxList","i","box_count","push","MemeGenerator_MemeTextBox","_this2","memeArray","MemeGenerator_Canvas","type","downloadMeme","style","fontWeight","isBold","displayName","filter","map","MemeGenerator_TemplateButton","key","MemeGeneratorWrapper","slice","newMemeTextArray","axios","get","data","success","memes","Array","_this3","react_router","exact","path","render","routeProps","components_MemeGenerator_MemeGenerator","assign","LikesController","likes","isBolded","handleLike","bind","assertThisInitialized","postConfig","method","headers","Accept","Content-Type","body","JSON","stringify","fetch","json","buttonType","onSubmit","role","aria-label","MemeModel","topText","bottomText","MemeGallery_LikesController","MemeGallery","ourFavorites","MemeGallery_MemeModel","_id","NavBar","links","page","App","pageName","String","split","react_router_dom","components_NavBar","MemeGenerator_MemeGeneratorWrapper","components_MemeGallery_MemeGallery","Boolean","hostname","ReactDOM","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fddf9a34.chunk.js","sourcesContent":["import React from 'react';\n\n/** Text box for meme captions */\nclass MemeTextBox extends React.Component {\n  /*\n      TODO: complete this component\n          Props: index, a number indicating which text box this is\n                 handleMemeText, a function that updates \n                                 the state in MemeGeneratorWrapper when we \n                                 update the text\n  */\n  render() {\n    return (\n      <div>\n        <h2>Text Box {this.props.index + 1}</h2>\n        <textarea onChange={e => this.props.handleMemeText(this.props.index,e.target.value)}></textarea>\n      </div>\n    );\n  }\n\n}\n\nexport default MemeTextBox;","import React from 'react';\n/** Component for selecting meme template */\nclass TemplateButton extends React.Component {\n  /* \n      TODO: complete this component\n           Props: meme, an object containing information about the meme.\n                        You'll need the id and url properties.                       \n                  reselectMeme, a function that changes the meme template on the left \n                                when the image is clicked.\n                  changeText, a function that changes the name of the meme template when\n                              hovering over different templates.\n                  resetText, a function that resets the displayed name to the current\n                             template when the mouse leaves the buttons.\n  */\n\n  render() {\n    return (\n        <img \n          className=\"template-button\" \n          src={this.props.meme.url} \n          alt=\"meme thumbnail\" \n          onClick={this.props.reselectMeme} \n          onMouseLeave={this.props.resetText} \n          onMouseOver={this.props.changeText}>\n        </img>\n    );\n  }\n}\nexport default TemplateButton;","import React from 'react';\n/**\n * Component for rendering all canvas elements\n * May be used to also draw text\n */\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  drawImage() {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (this.props.imgObj) {\n      let img = new Image();\n      img.onload = () => {ctx.drawImage(img,0,0,img.width,img.height,\n                                            0,0,canvas.width,canvas.height)};\n      img.src = this.props.imgObj.url;\n    }\n  }\n\n  componentDidMount() {\n    this.drawImage();\n  }\n\n  componentDidUpdate() {\n    this.drawImage();\n  }\n\n  render() {\n    let width;\n    let height;\n    if (this.props.imgObj) {\n      width = 500;\n      height = this.props.imgObj.height/(this.props.imgObj.width/500);\n    } else {\n      width = 0;\n      height = 0;\n    }\n    return (\n      <div>\n        <canvas\n          width={width}\n          height={height}\n          ref={this.canvasRef}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;","import React from 'react';\nimport MemeTextBox from './MemeTextBox';\nimport TemplateButton from './TemplateButton';\nimport Canvas from './Canvas';\nimport Axios from 'axios';\nrequire('../../style/generator.css')\n\n/** Component that handles the meme generator */\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchTerm: \"\"\n    };\n  }\n\n  handleInput = (text) => {\n    this.setState(() => ({\n      searchTerm: text\n    }));\n  }\n\n  checkMatch = (meme) => {\n    let regexp = new RegExp(this.state.searchTerm,'gi');\n    return (this.state.searchTerm === \"\" || meme.name.match(regexp) != null);\n  }\n\n  /* \n   * Calls the /upload endpoint and stores meme in database\n   */\n  uploadMeme = (event) => {\n    // look into what this does\n    event.preventDefault();\n    let myImg = {\n      template_id: this.props.currentMeme.id,\n      photoURL: this.props.currentMeme.url,\n      memeTexts: this.props.memeText,\n      user: \"Who\"\n    };\n    console.log(this.props.memeText);\n    Axios.post('/upload', myImg)\n      .then(response => {\n        if(response.status === 200){\n          window.location.href = \"/gallery\";\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  createTextBoxes = () => {\n    /* \n        TODO: create a list of text boxes for the user to enter text into\n            Props: currentMeme, an object containing fields about the current meme.\n                                Use the box_count field for this function.\n                   handleMemeText, a function that updates \n                   the state in MemeGeneratorWrapper when we \n                   update the text\n    */\n   let textBoxList = [];\n   if (this.props.currentMeme != null) {\n      for (let i = 0; i < this.props.currentMeme.box_count; i++) {\n        textBoxList.push(<MemeTextBox id=\"box1\" index={i} handleMemeText={this.props.handleMemeText}/>);\n      }\n   }\n\n   return textBoxList;  \n  }\n\n  render() {\n    let imgObj = this.props.memeArray ? this.props.currentMeme : null;\n    return (\n      <div className='meme-gen'>\n        {/* align left  */}\n        <h2 className=\"title\">Meme Generator</h2>\n\n        <div className='left-col'>\n          <div className='img-preview'>\n            <Canvas imgObj={imgObj} />\n          </div>\n        </div>\n        \n        <div className='right-col'>\n          <div className='textboxes'>\n            {this.createTextBoxes()}\n          </div>\n          <div className='template-search'>\n            <div className='buttons-section'>\n              <button type=\"submit\" onClick={this.uploadMeme}> Submit Meme </button>\n              <button type=\"submit\" onClick={this.props.downloadMeme}>Download Meme</button>\n            </div>\n            <input id='search' type='text' onChange={e => this.handleInput(e.target.value)}></input>\n            <div id='catalogue'>\n              <p style={{\n                fontWeight: this.props.isBold ? 'bold' : 'normal'\n              }}>{this.props.displayName}</p>\n              <div id='meme-templates'>\n                {\n                  this.props.memeArray &&\n                  this.props.memeArray.filter(this.checkMatch).map((meme) => (\n                    <TemplateButton\n                      key={meme.id}\n                      meme={meme}\n                      reselectMeme={() => this.props.reselectMeme(meme)}\n                      changeText={() => this.props.changeText(meme)}\n                      resetText={this.props.resetText}/>\n                  ))\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n       \n      </div>\n    );\n  }\n}\nexport default MemeGenerator;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport MemeGenerator from './MemeGenerator';\nclass MemeGeneratorWrapper extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      memeArray: null,\n      currentMeme: null,\n      displayName: 'Loading...',\n      isBold: false,\n      memeText: []\n    };\n  }\n\n  componentWillMount() {\n    /* get meme data via get request */\n    axios.get('https://api.imgflip.com/get_memes')\n    .then(response => {\n      if (response.data.success) {\n        let memes = response.data.data.memes;\n        this.setState((state) => ({\n          memeArray: memes,\n          currentMeme: memes[0],\n          displayName: memes[0].name,\n          isBold: true,\n          memeText: new Array(memes[0].box_count)\n        }));\n      }\n    });\n  }\n\n   /* called when meme template is changed */\n  reselectMeme = (meme) => {\n    this.setState((state) => ({\n      currentMeme: meme,\n      isBold: true,\n      memeText: state.memeText.slice(0,meme.box_count)\n    }));\n  }\n\n  /* called when text needs to be changed when hovering over different templates */\n  changeText = (meme) => {\n    this.setState((state,props) => ({\n      displayName: meme.name,\n      isBold: (meme === state.currentMeme)\n    }));\n  }\n\n  /* called when text needs to be reset to display the name of the current meme */\n  resetText = () => {\n    this.setState((state,props) => ({\n      displayName: state.currentMeme.name,\n      isBold: true\n    }));\n  }\n\n  /* called when caption text is added to the array */\n  handleMemeText = (index,text) => {\n    let newMemeTextArray = this.state.memeText;\n    newMemeTextArray[index] = text;\n    this.setState((state) => ({\n      memeText: newMemeTextArray\n    }));\n  }\n\n  render() {\n    return (\n      <Route\n        exact={true}\n        path='/'\n        render = {(routeProps) =>\n          <MemeGenerator\n            {...routeProps}\n            memeArray={this.state.memeArray}\n            currentMeme={this.state.currentMeme}\n            displayName={this.state.memeArray ? this.state.displayName : 'Loading...'}\n            reselectMeme={this.reselectMeme}\n            changeText={this.changeText}\n            resetText={this.resetText}\n            isBold={this.state.isBold}\n            handleMemeText={this.handleMemeText}\n            memeText={this.state.memeText}\n            downloadMeme={this.downloadMeme}\n          />\n        }\n      />\n    );\n  }\n}\nexport default MemeGeneratorWrapper;","import React from 'react';\n\nclass LikesController extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      likes: this.props.likes,\n      isBolded: this.props.isBolded,\n    }\n\n    this.handleLike = this.handleLike.bind(this);\n  }\n\n  handleLike(event){\n    event.preventDefault();\n    let postConfig = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(\n        {id: this.props.id,\n         likes: this.state.likes,\n         isBolded: this.state.isBolded})\n    };\n    fetch('/likememe', postConfig)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        this.setState(data);\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render(){\n    const buttonType = this.state.isBolded ? \"likedButton\" : \"unlikedButton\";\n    return(\n      <form onSubmit={this.handleLike}>\n        <button className={buttonType} type=\"Submit\">\n          <span role=\"img\" aria-label=\"like\">👍 </span>\n          {this.state.likes}\n        </button>\n      </form>\n    )\n  }\n}\nexport default LikesController;","import React from 'react';\nimport LikesController from './LikesController';\n// Component that handles each meme displayed.\nclass MemeModel extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      id: this.props.id,\n      photoURL: this.props.photoURL,\n      topText: this.props.topText,\n      bottomText: this.props.bottomText,\n      user: this.props.user,\n    };\n  }\n\n  render(){\n    return(\n      <div className=\"memeModel\">\n        <div className=\"memeImageOutline\">\n          <img className=\"memeImage\" src={this.state.photoURL} alt={this.state.photoURL}/>\n          <h2> {this.props.topText} </h2>\n          <h2> {this.props.bottomText} </h2>\n        </div>\n        <div className=\"controls\">\n          <h4> by {this.props.user} </h4>\n          <LikesController likes={this.props.likes}\n                           isBolded={this.props.isBolded}\n                           id={this.state.id} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MemeModel;","import React from 'react';\nimport MemeModel from './MemeModel';\nimport Axios from 'axios';\nrequire('../../style/meme.css');\n\n/** Component that handles the overall meme gallery page.*/\nclass MemeGallery extends React.Component {\n  constructor() {\n    super();\n    Axios.get('/getmemes')\n    .then(response => {\n      this.setState({\n        memeArray: response.data,\n      })\n    });\n    this.state = {\n      memeArray: null,\n    };\n  }\n\n  render() {\n    console.log(this.state.memeArray);\n    const ourFavorites = this.state.memeArray ? this.state.memeArray.map ((meme) =>\n      <MemeModel\n        key={meme._id}\n        id={meme._id}\n        photoURL={meme.photoURL}\n        topText={meme.topText}\n        bottomText={meme.bottomText}\n        user={meme.user}\n        likes={meme.likes}\n        isBolded={meme.isBolded}\n      />\n    ) : null;\n    return(\n      // example of inline style\n      <div>\n        <h2 className=\"title\">Meme Gallery</h2>\n        {ourFavorites}\n      </div>\n    );\n  }\n}\n\n\n\nexport default MemeGallery;\n","import React from 'react';\n/** Component for navigational buttons */\nconst NavBar = (props) => {\n  let links;\n  if (props.page === \"\"){\n    links =   \n      <div id=\"links-section\">\n        <a className=\"link selected\" id=\"acm-generator\" href=\"/\">Generator</a>\n        <a className=\"link\" id=\"acm-gallery\" href=\"/gallery\">Gallery</a>\n      </div>;\n  }\n  else if (props.page === \"gallery\"){\n    links =   \n      <div id=\"links-section\">\n        <a className=\"link\" id=\"acm-generator\" href=\"/\">Generator</a>\n        <a className=\"link selected\" id=\"acm-gallery\" href=\"/gallery\">Gallery</a>\n      </div>;\n    \n  }\n \n  return(\n    <section id='nav-bar'>\n      <h1 id=\"acm\"> ACM UCSD Meme Gen </h1>\n      {links}\n    </section>\n  ); \n}\nexport default NavBar;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport MemeGeneratorWrapper from './components/MemeGenerator/MemeGeneratorWrapper';\nimport MemeGallery from './components/MemeGallery/MemeGallery';\nimport NavBar from './components/NavBar';\n\n\n/** Main app controller */\nclass App extends React.Component {\n\n  render() {\n    // gets the URL pathname \n    const pageName = String(window.location).split(\"/\")[3];\n    return (\n      <Router>\n        <div className=\"App\">\n        <NavBar page={pageName}/>\n        <MemeGeneratorWrapper />\n        <Route\n          path=\"/gallery\"\n          render = {(routeProps) =>\n            <MemeGallery {...routeProps} />\n          } />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}